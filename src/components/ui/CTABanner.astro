---
import Button from "./button.astro";
import StarIcon from "@/assets/icons/star40x40.svg";

export interface Props {
  title: string;
  description?: string;
  buttonText: string;
  buttonHref: string;
  buttonTarget?: "_self" | "_blank" | "_parent" | "_top";
  buttonVariant?: "primary" | "secondary" | "tertiary" | "optional1" | "optional2";
  variant?: "default" | "gradient" | "bordered";
  className?: string;
  id?: string;
  animated?: boolean;
}

const {
  title,
  description,
  buttonText,
  buttonHref,
  buttonTarget = "_self",
  buttonVariant = "primary",
  variant = "default",
  className = "",
  id,
  animated = true,
} = Astro.props;

/**
 * CTA Banner Variants:
 * - default: Clean banner with softBeige background and subtle styling
 * - gradient: Eye-catching banner with gradient background from salviaGreen to accentGreen
 * - bordered: Elegant banner with border styling and transparent background
 */

const variants = {
  default: "bg-softBeige border border-smokyBlack/10",
  gradient: "bg-gradient-to-r from-salviaGreen to-accentGreen text-softWhite",
  bordered: "bg-softWhite border-2 border-salviaGreen",
};

const textColorVariants = {
  default: "text-smokyBlack",
  gradient: "text-softWhite",
  bordered: "text-smokyBlack",
};
---

<section
  id={id}
  class={`cta-banner relative overflow-hidden rounded-2xl p-8 md:p-12 lg:p-16 ${variants[variant]} ${className}`}
  data-animated={animated}
>
  <!-- Background texture/pattern for visual interest -->
  <div class="absolute inset-0 opacity-5">
    <div class="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,_rgba(0,0,0,0.1)_1px,_transparent_1px)] bg-[length:20px_20px]"></div>
  </div>

  <!-- Content container -->
  <div class="relative z-10 text-center max-w-4xl mx-auto">
    <!-- Title -->
    <h2 class={`cta-title font-playfair text-2xl md:text-3xl lg:text-4xl font-bold mb-4 ${textColorVariants[variant]}`}>
      {title}
    </h2>

    <!-- Description (optional) -->
    {description && (
      <p class={`cta-description font-opensans text-base md:text-lg lg:text-xl mb-8 opacity-90 max-w-2xl mx-auto ${textColorVariants[variant]}`}>
        {description}
      </p>
    )}

    <!-- CTA Button -->
    <div class="cta-button">
      <Button
        href={buttonHref}
        target={buttonTarget}
        variant={buttonVariant}
        animation={true}
        className="inline-flex items-center gap-2 px-8 py-2 font-poppins"
      >
        {buttonText}
        <StarIcon class="star w-8 h-8" />
      </Button>
    </div>
  </div>
</section>

{animated && (
  <script>
    import { gsap } from "gsap";
    import { ScrollTrigger } from "gsap/ScrollTrigger";

    gsap.registerPlugin(ScrollTrigger);

    document.addEventListener("DOMContentLoaded", () => {
      const ctaBanner = document.querySelector(".cta-banner[data-animated='true']");

      if (ctaBanner) {
        // Set initial states
        gsap.set(".cta-title", { y: 30, opacity: 0 });
        gsap.set(".cta-description", { y: 30, opacity: 0 });
        gsap.set(".cta-button", { y: 30, opacity: 0 });

        // Create timeline for sequential animation
        const tl = gsap.timeline({
          scrollTrigger: {
            trigger: ctaBanner,
            start: "top 80%",
            end: "bottom 20%",
            toggleActions: "play none none reverse",
            markers: false,
          }
        });

        tl.to(".cta-title", {
          y: 0,
          opacity: 1,
          duration: 0.8,
          ease: "power2.out"
        })
        .to(".cta-description", {
          y: 0,
          opacity: 1,
          duration: 0.8,
          ease: "power2.out"
        }, "-=0.4")
        .to(".cta-button", {
          y: 0,
          opacity: 1,
          duration: 0.8,
          ease: "power2.out"
        }, "-=0.4");

        // Add hover effect for the entire banner
        ctaBanner.addEventListener("mouseenter", () => {
          gsap.to(ctaBanner, {
            scale: 1.02,
            duration: 0.3,
            ease: "power2.out"
          });
        });

        ctaBanner.addEventListener("mouseleave", () => {
          gsap.to(ctaBanner, {
            scale: 1,
            duration: 0.3,
            ease: "power2.out"
          });
        });
      }
    });
  </script>
)}

<style>
  /* Additional styles for enhanced visual appeal */
  .cta-banner {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .cta-banner:hover {
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

</style>